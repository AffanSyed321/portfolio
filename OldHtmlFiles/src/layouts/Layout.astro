---
import '@fontsource/inter/latin-400.css';
import '@fontsource/inter/latin-500.css';
import { ViewTransitions } from 'astro:transitions';
import Footer from '../components/layout/Footer.tsx';
import Header from '../components/layout/header.tsx';
import { SEOMetadata } from 'astro-seo-metadata';

interface Props {
  description: string;
  title: string;
  image: string;
}

const { description, title, image } = Astro.props;
---

<!doctype html>
<html lang="en" x-cloak x-data :class="{ 'dark': $store.theme.isDark }">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <ViewTransitions />
    <SEOMetadata
      siteName={'Bettina sosa portfolio'}
      title={title}
      description={description}
      image={image}
      favicon={'/favicon.svg'}
      author="Bettina Sosa"
      copyright="ISC"
      astroSitemap={true}
      canonicalUrl={Astro.url.toString()}
      type={'website'}
      astroGenerator={true}
    />
    <script>
      !(function (t, e) {
        var o, n, p, r;
        e.__SV ||
          ((window.posthog = e),
          (e._i = []),
          (e.init = function (i, s, a) {
            function g(t, e) {
              var o = e.split('.');
              2 == o.length && ((t = t[o[0]]), (e = o[1])),
                (t[e] = function () {
                  t.push([e].concat(Array.prototype.slice.call(arguments, 0)));
                });
            }
            ((p = t.createElement('script')).type = 'text/javascript'),
              (p.async = !0),
              (p.src = s.api_host + '/static/array.js'),
              (r = t.getElementsByTagName('script')[0]).parentNode.insertBefore(
                p,
                r
              );
            var u = e;
            for (
              void 0 !== a ? (u = e[a] = []) : (a = 'posthog'),
                u.people = u.people || [],
                u.toString = function (t) {
                  var e = 'posthog';
                  return (
                    'posthog' !== a && (e += '.' + a), t || (e += ' (stub)'), e
                  );
                },
                u.people.toString = function () {
                  return u.toString(1) + '.people (stub)';
                },
                o =
                  'capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys'.split(
                    ' '
                  ),
                n = 0;
              n < o.length;
              n++
            )
              g(u, o[n]);
            e._i.push([i, s, a]);
          }),
          (e.__SV = 1));
      })(document, window.posthog || []);
      posthog.init('phc_QPvYwgtVvS3JpJSy51bf15dAc9Duzli72T6eW3fAE8d', {
        api_host: 'https://app.posthog.com'
      });
    </script>

    <script async src="https://www.googletagmanager.com/gtag/js?id=G-9FD59WE345"
    ></script>
    <script>
      window.dataLayer = window.dataLayer || [];

      function gtag() {
        dataLayer.push(arguments);
      }

      gtag('js', new Date());

      gtag('config', 'G-9FD59WE345');
    </script>
  </head>
  <!-- Google tag (gtag.js) -->

  <body
    class="w-screen overflow-x-hidden bg-primary-50 text-primary-950 antialiased transition dark:bg-primary-950 dark:text-primary-200"
  >
    <Header />
    <main>
      <slot />
    </main>
    <Footer />
    <style is:global>
      [x-cloak] {
        display: none !important;
      }
    </style>
    <script>
      import Alpine from 'alpinejs';
      import collapse from '@alpinejs/collapse';

      Alpine.plugin(collapse);

      Alpine.store('theme', {
        init() {
          this.isDark = (() => {
            if (
              typeof localStorage !== 'undefined' &&
              localStorage.getItem('theme')
            ) {
              return localStorage.getItem('theme') === 'dark';
            }
            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
              return true;
            }
            return false;
          })();
        },

        isDark: false,

        toggle() {
          this.isDark = !this.isDark;
          localStorage.setItem('theme', this.isDark ? 'dark' : 'light');
        }
      });

      window.Alpine = Alpine;
      Alpine.start();
    </script>
  </body>
</html>
